version: 1.0.1.{build}
# image:
# - Visual Studio 2017
# - Ubuntu1804


environment:
  VULKAN_SDK: c:\VulkanSDK\1.1.106.0
  VKSDKURL: https://sdk.lunarg.com/sdk/download/1.1.106.0/windows/VulkanSDK-1.1.106.0-Installer.exe
  VKSDKINSTALLER: c:\tools\vksdk1.1.106.0.exe
  matrix:
# Linux
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804

# 32-bit, VC2017
#     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#       VCVARS: vcvarsamd64_x86
#       VCPKG_PLATFORM: x86-windows

# # 64-bit, VC2017
#     - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#       VCVARS: vcvars64
#       VCPKG_PLATFORM: x64-windows

matrix:
  fast_finish: true # finish immediately once one of the jobs fails

# fetch repository as zip archive
shallow_clone: true                 # default is "false"


cache:
  - c:\VulkanSDK\1.1.106.0
install:
  - cmd: choco install -y ninja
  # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  # Download and install Vulkan SDK if not cached - the "Start-Process" is to not continue until install is done
  - ps: >-
      if ($isWindows -and -not (Test-Path "$env:VULKAN_SDK/Include/vulkan/vulkan.h")) {
        $wc = New-Object System.Net.WebClient
        $wc.DownloadFile($env:VKSDKURL, $env:VKSDKINSTALLER)
        Start-Process $env:VKSDKINSTALLER -ArgumentList "/S" -Wait }
  - sh: sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential cmake libgl1-mesa-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev python3-pip ninja-build
  - sh: pip3 install --user codespell

# for future use if we need vcpkg
# -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake

build_script:
- cmd: >-
    call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\%VCVARS%.bat" &&
    cmake -GNinja -Bbuild -H. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=C:/Python37-x64/python.exe &&
    cd build &&
    ninja &&
    cd ..
- sh: >-
    ./checkCodespell
    cmake -G Ninja -H. -Bbuild-xlib -DPRESENTATION_BACKEND=xlib
    ninja -C build-xlib
    cmake -G Ninja -H. -Bbuild-xcb -DPRESENTATION_BACKEND=xcb
    ninja -C build-xcb
    cmake -G Ninja -H. -Bbuild-wayland -DPRESENTATION_BACKEND=wayland
    ninja -C build-wayland
    ./runClangFormat.sh
    git diff --patch --exit-code > clang-format.patch || { echo "The following files need clang-formatting:"; sed -n -e "s/^diff.* b\///p" clang-format.patch; false; }

